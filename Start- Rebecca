using System;
using System.Collections.Generic;
using System.Threading; //for AI delay

namespace Project
{
    //rebecca
    public abstract class Player
    {

        public string Name { get; set; }
        public string Type { get; set; }

        public Player(string name, string type)
        {
            Name = name;
            Type = type;
        }
        public abstract void placeDisc(Board board);
       
    }

    //rebecca
    public class HumanPlayer : Player
    {
        public HumanPlayer(string name, string type) : base(name, type)
        {
            Console.WriteLine($"Player {Name} has been created");
        }

        public override void placeDisc(Board newBoard)
        {
            Console.WriteLine($"Player {Name}'s turn — Pick a column (0–6):");

            string input = Console.ReadLine();

            if (!int.TryParse(input, out int col))
            {
                throw new Exception("Input was not a number");
            }

            if (col < 0 || col > 6)
            {
                throw new Exception("Column must be between 0 and 6");
            }

            if (newBoard.GetColumnHeights(col) >= 6)
            {
                throw new Exception("That column is full");
            }

            newBoard.placeDisc(col, Type);
        }
    }

    //kachi
    public class ComputerPlayer : Player
    {
        List<int> winCols = new();
        List<int> blockCols = new();
        string aiDisc = "";
        Random rand = new Random();
        public ComputerPlayer(string name, string type) : base(name, type)
        {
            Console.WriteLine("trY BEatInG me, I dARe YoU");
            aiDisc = type;
        }
    
        //checks board columns for threats
        private void ColumnChecker(Board board)
        {
            for (int col = 0; col < 7; col++)
            {
                if (board.GetColumnHeight(col) >= 2 && board.GetColumnHeight(col) <= 5)
                {
                    int r1 = 6 - board.GetColumnHeight(col);
                    int r2 = r1 + 1;
    
                    string d1 = board.Grid[r1, col];
                    string d2 = board.Grid[r2, col];
    
                    if (d1 == d2 && d1 != " ")
                    {
                        if (d1 == aiDisc)
                            winCols.Add(col);
                        else
                            blockCols.Add(col);
                    }
                }
            }
        }
    
        //checks board rows for threats
        private void RowChecker(Board board)
        {
            for (int row = 5; row > -1; row--) //check all rows starting from the bottom
            {
                for (int col = 0; col <= 3; col++) // ccheck only rows 0 - 3 because anything more can't hold 4 discs
                {
                    int aiCount = 0; //used to track how many ai discs are in a row
                    int playerCount = 0; //used to track how many player1 discs are in a row
                    int emptyCol = -1; //used to keep track of a row with one empty column
    
                    for (int offset = 0; offset < 4; offset++) //runs inner loop that checks next columns on same row
                    {
                        string cell = board.Grid[row, col + offset];
                        if (cell == aiDisc)  
                        {
                            aiCount++; //once we find any aidisc in any cell we increase this
                        }
                        else if (cell != aiDisc && cell != " ") {
                            playerCount++; //once we find any player1 in any cell we increase this
                        }
                        else
                        {
                            //if cell is empty, save cell col to emptyCol
                            if (emptyCol == -1)
                                emptyCol = col + offset;
                            else
                            {
                                emptyCol = -1; // more than 1 empty = not useful
                                break;
                            }
                        }
                    }
    
                    // if we found an empty column and the height of that emptycol is just below the row we are checking
                    if (emptyCol != -1 && row == 5 - board.GetColumnHeight(emptyCol))
                    {
                        //check if ai count is 3
                        if (aiCount == 3 && playerCount == 0)
                        {
                            //add col to our wincol
                            winCols.Add(emptyCol);
                        }
                        else if (playerCount == 3 && aiCount == 0)//check if player count is 3
                        {
                            //add to our blockcol
                            blockCols.Add(emptyCol);
                        }
                    }
                }
            }
        }
    
        //AI MOVES
        public override void placeDisc(Board board)
        {
            Thread.Sleep(800); //adds delay before AI plays
    
            winCols.Clear();
            blockCols.Clear();
    
            ColumnChecker(board);
            RowChecker(board);
    
            int selectedCol = -1;
    
            if (winCols.Count > 0)
            {
                selectedCol = winCols[rand.Next(winCols.Count)]; //if we have more than 2 winCols then we select anyone from the array
            }
            else if (blockCols.Count > 0)
            {
                selectedCol = blockCols[rand.Next(blockCols.Count)]; //if we have more than 2 blockCols then we select anyone from the array
            }
            else
            {
                do
                {
                    selectedCol = rand.Next(0, 7);
                }
                while (board.GetColumnHeight(selectedCol) >= 6); //put in random col
            }
    
            board.placeDisc(selectedCol, Type);
        }
    
    }

     //rebecca
    public void Display() //displays board
    {
            
        Console.WriteLine(" 0   1   2   3   4   5   6 ");
        Console.WriteLine("-----------------------------");
        for (int row = 0; row < 6; row++)
        {
            for (int col = 0; col < 7; col++)
            {
                Console.Write($"| {Grid[row, col]} ");
            }
            Console.WriteLine("|");
            Console.WriteLine("-----------------------------");
        }
    }

    //rebecca
    public bool CheckMoves()
    {
        if(MovesPlayed == 42)
        {
            return true;
        }
        return false;
    }

    //rebecca
    public void placeDisc(int col, string disc)
    {
        if (ColumnHeights[col] < 6) //if a column has less than 6 you can add to the column
        {
            int rowPlaced = 5 - ColumnHeights[col];
            Grid[rowPlaced, col] = disc;
            ColumnHeights[col] = ColumnHeights[col] + 1;
            RowLengths[rowPlaced] = RowLengths[rowPlaced] + 1;

            if (!LongRows.Contains(rowPlaced) && RowLengths[rowPlaced] > 3) //add row to eligible list
            {
                LongRows.Add(rowPlaced);
            }

            if (!LongCols.Contains(col) && ColumnHeights[col] > 3) //add col to eligible list
            {
                LongCols.Add(col);
            }

            MovesPlayed++;
        }

        else
        {
            Console.WriteLine($"Please select another column");
        }
    }


    public class Board{
        
        //mohammed
        public string[,] Grid = new string[6, 7]; // 6 rows, 7 columns

        private Dictionary<int, int> ColumnHeights; //this keeps track of each filled position(row) in each column

        private Dictionary<int, int> RowLengths; //this keeps track of each filled position(column) in each row

        private List<int> LongRows; //track rows eligible for a winner

        private List<int> LongCols; //track columns eligible for a winner

        private int MovesPlayed = 0; 

        //mohammed
        public Board()
        {
            LongRows =  new List<int> { }; //init tracker for eligible winner cols

            LongCols = new List<int> { }; //init tracker for eligible winner rows

            ColumnHeights = new Dictionary<int, int>(); //init tracker for how many discs are in a col

            RowLengths = new Dictionary<int, int>(); //init tracker for how many discs are in a row

            for (int col = 0; col < 7; col++)
            {
                ColumnHeights[col] = 0; //set all values to 0(because all columns are empty when board is init)

            }//creates an objectlike iterable that stores key(columns)-value(rows) pairs

            for (int row = 0; row < 6; row++)
            {
                RowLengths[row] = 0; ////set all values to 0(because all rows are empty when board is init)

            }//creates an objectlike iterable that stores key(rows)-value(columns) pairs

            for (int row = 0; row < 6; row++)
            {
                for (int col = 0; col < 7; col++)
                {
                    Grid[row, col] = " ";
                }
            }
        }

        //mohammed
        public bool CheckRowWinner()
        {
            foreach (int row in LongRows)
            {
                for (int col = 0; col <= 3; col++) //only need to check up to col 4
                {
                    string cell = Grid[row, col];
                    if (cell != " " &&
                        cell == Grid[row, col + 1] &&
                        cell == Grid[row, col + 2] &&
                        cell == Grid[row, col + 3]) //check the next 3 rows and see if they are equal
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        //mohammed
        public bool CheckColumnWinner()
        {
            foreach (int col in LongCols)
            {
                for (int row = 5; row >= 3; row--) // start from bottom row
                {
                    string cell = Grid[row, col];
                    if (cell != " " &&
                        cell == Grid[row - 1, col] &&
                        cell == Grid[row - 2, col] &&
                        cell == Grid[row - 3, col]) //check the next 3 columns and see if they are equal
                    {
                        return true;
                    }
                }
            }
            return false;
        }
    

        //kachi
        public bool CheckDiagonalWinner()
        {
            foreach (int col in LongCols)
            {
                int colHeight = ColumnHeights[col];
    
                // Start checking from row = 2 (highest row that still allows room for 3 more discs below diagonally)
                for (int row = 2; row >= 6 - (colHeight + 1); row--)
                {
                    // RIGHT CHECK: top-left to bottom-right "\"
                    if (col <= 3)
                    {
                        if (Grid[row, col] != " " &&
                            Grid[row, col] == Grid[row + 1, col + 1] &&
                            Grid[row, col] == Grid[row + 2, col + 2] &&
                            Grid[row, col] == Grid[row + 3, col + 3])
                        {
                            return true;
                        }
                    }
    
                    // LEFT CHECK: top-right to bottom-left "/"
                    if (col >= 3)
                    {
                        if (Grid[row, col] != " " &&
                            Grid[row, col] == Grid[row + 1, col - 1] &&
                            Grid[row, col] == Grid[row + 2, col - 2] &&
                            Grid[row, col] == Grid[row + 3, col - 3])
                        {
                            return true;
                        }
                    }
                }
            }
    
            return false;
        }

        //mohammed
        public bool CheckWinner()
        {
            if (CheckRowWinner() ||
                CheckColumnWinner() ||
                CheckDiagonalWinner())
            {
                return true;
            }
            return false;
        }
    
        //get methods so our columnHeight and RowLength can be private
        public int GetColumnHeight(int col)
        {
            return ColumnHeights.ContainsKey(col) ? ColumnHeights[col] : 0;
        }

        public int GetRowLength(int row)
        {
            return RowLengths.ContainsKey(row) ? RowLengths[row] : 0;
        }
    }

    //kachi
    public class Game
    {
        public Player player1;
        public Player player2;

        public bool GameStarted = false;

        public Game(int mode)
        {
            if (mode == 1)
            {
                player1 = CreateHumanPlayer(1);
                player2 = CreateHumanPlayer(2);

                while (player1.Type == player2.Type)
                {
                    Console.WriteLine("Both players chose the same disc. Player 2, choose a different one.");
                    player2 = CreateHumanPlayer(2);
                }
            }
            else if (mode == 2)
            {
                player1 = CreateHumanPlayer(1);
                string disc = "";
                string[] discAI = new string[2] { "X", "O" };
                foreach(string i in discAI)
                {
                    if(player1.Type.ToLower() != i.ToLower())
                    {
                        disc = i;
                        break;
                    }
                }
                player2 = new ComputerPlayer("Can't Beat Me", disc);
            }

            GameStarted = true;
        }

        private Player CreateHumanPlayer(int playerNumber)
        {
            Console.WriteLine($"\nPlayer {playerNumber}, enter your name:");
            string name = Console.ReadLine();

            string type = "";
            while (true)
            {
                Console.WriteLine($"\nPlayer {playerNumber}, enter a char for your disc (e.g., X or O):");
                string input = Console.ReadLine();

                if (!string.IsNullOrWhiteSpace(input))
                {
                    type = input[0].ToString().ToUpper(); //Get first character and convert to string(for users who type in more than character)
                    break;
                }

                Console.WriteLine("Please enter at least one character.");
            }

            return new HumanPlayer(name, type);
        }

        public void Start()
        {
            int turn = 1;
            if (GameStarted)
            {
                Board newBoard = new Board();
                newBoard.Display();
                while (GameStarted)
                {
                    if(turn == 1)
                    {
                        try
                        {
                            player1.placeDisc(newBoard);
                            if (newBoard.CheckWinner())
                            {
                                Console.WriteLine($"\nPlayer {player1.Name} wins!");
                                GameStarted = false;
                            }
                            else if (newBoard.CheckMoves())
                            {
                                Console.WriteLine("\nIt's a draw — the board is full!");
                                GameStarted = false;
                            }
                            turn = 2;
                            
                        }
                        catch(Exception e)
                        {
                            Console.WriteLine($"Error {e.Message}");
                        }
                        
                    }
                    else
                    {
                        try
                        {
                            player2.placeDisc(newBoard);
                            if (newBoard.CheckWinner())
                            {
                                Console.WriteLine($"\nPlayer {player2.Name} wins!");
                                GameStarted = false;
                            }
                            else if (newBoard.CheckMoves())
                            {
                                Console.WriteLine("\nIt's a draw — the board is full!");
                                GameStarted = false;
                            }
                            turn = 1;
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine($"Error {e.Message}");
                        }
                    }
                    newBoard.Display();
                }

                AskToPlayAgain();
            }
           
            
        }

        private void AskToPlayAgain()
        {
            Console.WriteLine("\nDo you want to play again?");
            Console.WriteLine("1 - Yes");
            Console.WriteLine("2 - No");

            while (true)
            {
                try
                {
                    int choice = int.Parse(Console.ReadLine());

                    if (choice == 1)
                    {
                        Console.Clear();
                        new Game(Game.GetGameMode()).Start(); // Restart with fresh game
                        break;
                    }
                    else if (choice == 2)
                    {
                        Console.WriteLine("Thanks for playing!");
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Enter 1 or 2 only.");
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine($"Invalid input: {e.Message}");
                }
            }
        }


        //static function that runs gameMode(Single or Multi player)
        public static int GetGameMode()
        {
            while (true)
            {
                Console.WriteLine("\nSelect 1 for Human vs Human");
                Console.WriteLine("\nSelect 2 for Human vs Computer\n");

                string input = Console.ReadLine();

                if (int.TryParse(input, out int selected) && (selected == 1 || selected == 2))
                {
                    return selected; // break loop and return selected to function
                }

                Console.WriteLine("Invalid input. Please enter 1 or 2.");
            }
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Welcome To Our Game");
    
            int mode = Game.GetGameMode();
    
            Game game = new Game(mode);
    
            game.Start();
            
        }
    }
}
