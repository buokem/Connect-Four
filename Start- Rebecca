using System;
using System.Collections.Generic;


namespace Project
{
    //rebecca
    public abstract class Player
    {

        public string Name { get; set; }
        public string Type { get; set; }

        public Player(string name, string type)
        {
            Name = name;
            Type = type;
        }
        public abstract void placeDisc(Board board);
       
    }

    //rebecca
    public class HumanPlayer : Player
    {
        public HumanPlayer(string name, string type) : base(name, type)
        {
            Console.WriteLine($"Player {Name} has been created");
        }

        public override void placeDisc(Board newBoard)
        {
            Console.WriteLine($"Player {Name}'s turn — Pick a column (0–6):");

            string input = Console.ReadLine();

            if (!int.TryParse(input, out int col))
            {
                throw new Exception("Input was not a number");
            }

            if (col < 0 || col > 6)
            {
                throw new Exception("Column must be between 0 and 6");
            }

            if (newBoard.ColumnHeights[col] >= 6)
            {
                throw new Exception("That column is full");
            }

            newBoard.placeDisc(col, Type);
        }
    }

    //kachi
    public class ComputerPlayer : Player
    {
        public ComputerPlayer(string name, string type) : base(name, type)
        {

        }

        //AI MOVES
        public override void placeDisc(Board board)
        {
            
        }
    }


    public class Board{
        
        //mohammed
        public string[,] Grid = new string[6, 7]; // 6 rows, 7 columns

        public Dictionary<int, int> ColumnHeights; //this keeps track of each filled position(row) in each column

        private Dictionary<int, int> RowLengths; //this keeps track of each filled position(column) in each row

        private List<int> LongRows; //track rows eligible for a winner

        private List<int> LongCols; //track columns eligible for a winner

        private int MovesPlayed = 0; 

        //mohammed
        public Board()
        {
            LongRows =  new List<int> { }; //init tracker for eligible winner cols

            LongCols = new List<int> { }; //init tracker for eligible winner rows

            ColumnHeights = new Dictionary<int, int>(); //init tracker for how many discs are in a col

            RowLengths = new Dictionary<int, int>(); //init tracker for how many discs are in a row

            for (int col = 0; col < 7; col++)
            {
                ColumnHeights[col] = 0; //set all values to 0(because all columns are empty when board is init)

            }//creates an objectlike iterable that stores key(columns)-value(rows) pairs

            for (int row = 0; row < 6; row++)
            {
                RowLengths[row] = 0; ////set all values to 0(because all rows are empty when board is init)

            }//creates an objectlike iterable that stores key(rows)-value(columns) pairs

            for (int row = 0; row < 6; row++)
            {
                for (int col = 0; col < 7; col++)
                {
                    Grid[row, col] = " ";
                }
            }
        }

        //mohammed
        public bool CheckRowWinner()
        {
            foreach (int row in LongRows)
            {
                for (int col = 0; col <= 3; col++) //only need to check up to col 4
                {
                    string cell = Grid[row, col];
                    if (cell != " " &&
                        cell == Grid[row, col + 1] &&
                        cell == Grid[row, col + 2] &&
                        cell == Grid[row, col + 3]) //check the next 3 rows and see if they are equal
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        //mohammed
        public bool CheckColumnWinner()
        {
            foreach (int col in LongCols)
            {
                for (int row = 5; row >= 3; row--) // start from bottom row
                {
                    string cell = Grid[row, col];
                    if (cell != " " &&
                        cell == Grid[row - 1, col] &&
                        cell == Grid[row - 2, col] &&
                        cell == Grid[row - 3, col]) //check the next 3 columns and see if they are equal
                    {
                        return true;
                    }
                }
            }
            return false;
        }
    

    //kachi
    public bool CheckDiagonalWinner()
    {
        foreach (int col in LongCols)
        {
            int colHeight = ColumnHeights[col];

            // Start checking from row = 2 (highest row that still allows room for 3 more discs below diagonally)
            for (int row = 2; row >= 6 - (colHeight + 1); row--)
            {
                // RIGHT CHECK: top-left to bottom-right "\"
                if (col <= 3)
                {
                    if (Grid[row, col] != " " &&
                        Grid[row, col] == Grid[row + 1, col + 1] &&
                        Grid[row, col] == Grid[row + 2, col + 2] &&
                        Grid[row, col] == Grid[row + 3, col + 3])
                    {
                        return true;
                    }
                }

                // LEFT CHECK: top-right to bottom-left "/"
                if (col >= 3)
                {
                    if (Grid[row, col] != " " &&
                        Grid[row, col] == Grid[row + 1, col - 1] &&
                        Grid[row, col] == Grid[row + 2, col - 2] &&
                        Grid[row, col] == Grid[row + 3, col - 3])
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    //kachi
    public class Game
    {
        public Player player1;
        public Player player2;

        public bool GameStarted = false;

        public Game(int mode)
        {
            if (mode == 1)
            {
                player1 = CreateHumanPlayer(1);
                player2 = CreateHumanPlayer(2);

                while (player1.Type == player2.Type)
                {
                    Console.WriteLine("Both players chose the same disc. Player 2, choose a different one.");
                    player2 = CreateHumanPlayer(2);
                }
            }
            else if (mode == 2)
            {
                player1 = CreateHumanPlayer(1);
                string disc = "";
                string[] discAI = new string[2] { "X", "O" };
                foreach(string i in discAI)
                {
                    if(player1.Type.ToLower() != i.ToLower())
                    {
                        disc = i;
                        break;
                    }
                }
                player2 = new ComputerPlayer("Can't Beat Me", disc);
            }

            GameStarted = true;
        }

        private Player CreateHumanPlayer(int playerNumber)
        {
            Console.WriteLine($"\nPlayer {playerNumber}, enter your name:");
            string name = Console.ReadLine();

            string type = "";
            while (true)
            {
                Console.WriteLine($"\nPlayer {playerNumber}, enter a char for your disc (e.g., X or O):");
                string input = Console.ReadLine();

                if (!string.IsNullOrWhiteSpace(input))
                {
                    type = input[0].ToString().ToUpper(); //Get first character and convert to string(for users who type in more than character)
                    break;
                }

                Console.WriteLine("Please enter at least one character.");
            }

            return new HumanPlayer(name, type);
        }

        public void Start()
        {
            int turn = 1;
            if (GameStarted)
            {
                Board newBoard = new Board();
                newBoard.Display();
                while (GameStarted)
                {
                    if(turn == 1)
                    {
                        try
                        {
                            player1.placeDisc(newBoard);
                            if (newBoard.CheckWinner())
                            {
                                Console.WriteLine($"\nPlayer {player1.Name} wins!");
                                GameStarted = false;
                            }
                            else if (newBoard.CheckMoves())
                            {
                                Console.WriteLine("\nIt's a draw — the board is full!");
                                GameStarted = false;
                            }
                            turn = 2;
                            
                        }
                        catch(Exception e)
                        {
                            Console.WriteLine($"Error {e.Message}");
                        }
                        
                    }
                    else
                    {
                        try
                        {
                            player2.placeDisc(newBoard);
                            if (newBoard.CheckWinner())
                            {
                                Console.WriteLine($"\nPlayer {player2.Name} wins!");
                                GameStarted = false;
                            }
                            else if (newBoard.CheckMoves())
                            {
                                Console.WriteLine("\nIt's a draw — the board is full!");
                                GameStarted = false;
                            }
                            turn = 1;
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine($"Error {e.Message}");
                        }
                    }
                    newBoard.Display();
                }

                AskToPlayAgain();
            }
           
            
        }

        private void AskToPlayAgain()
        {
            Console.WriteLine("\nDo you want to play again?");
            Console.WriteLine("1 - Yes");
            Console.WriteLine("2 - No");

            while (true)
            {
                try
                {
                    int choice = int.Parse(Console.ReadLine());

                    if (choice == 1)
                    {
                        Console.Clear();
                        new Game(Game.GetGameMode()).Start(); // Restart with fresh game
                        break;
                    }
                    else if (choice == 2)
                    {
                        Console.WriteLine("Thanks for playing!");
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Enter 1 or 2 only.");
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine($"Invalid input: {e.Message}");
                }
            }
        }


        //static function that runs gameMode(Single or Multi player)
        public static int GetGameMode()
        {
            while (true)
            {
                Console.WriteLine("\nSelect 1 for Human vs Human");
                Console.WriteLine("\nSelect 2 for Human vs Computer\n");

                string input = Console.ReadLine();

                if (int.TryParse(input, out int selected) && (selected == 1 || selected == 2))
                {
                    return selected; // break loop and return selected to function
                }

                Console.WriteLine("Invalid input. Please enter 1 or 2.");
            }
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Welcome To Our Game");
    
            int mode = Game.GetGameMode();
    
            Game game = new Game(mode);
    
            game.Start();
            
        }
    }
}
